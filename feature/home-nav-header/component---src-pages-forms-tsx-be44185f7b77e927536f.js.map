{"version":3,"sources":["webpack:///./src/components/forms.tsx","webpack:///./src/pages/forms.tsx"],"names":["Forms","useState","select","setSelect","checkBox","setCheckBox","radioButton","setRadioButton","textField","setTextField","handleTextField","e","target","value","direction","variant","className","data-testid","onChange","handleSelect","label","hideLabel","type","name","onInput","slot","href","aria-invalid","FormsPage"],"mappings":"qJA0HeA,EA5GD,WAAmB,MACHC,mBAAS,qCAA9BC,EADwB,KAChBC,EADgB,OAECF,oBAAS,GAAlCG,EAFwB,KAEdC,EAFc,OAGOJ,oBAAS,GAAxCK,EAHwB,KAGXC,EAHW,OAIGN,mBAAS,kCAApCO,EAJwB,KAIbC,EAJa,KAsBzBC,EAAkB,SAACC,GACvBF,EAAaE,EAAEC,OAAOC,QAGxB,OACE,kBAAC,IAAD,CAAOC,UAAU,UACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWC,QAAQ,cAAnB,kBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,UAAU,aAEtB,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAWD,QAAQ,cAAcb,GACjC,8BACE,kBAAC,IAAD,KACE,4BAAQe,cAAY,SAASJ,MAAOX,EAAQgB,SAAU,SAACP,GAAD,OAjC3C,SAACA,GACpBR,EAAUQ,EAAEC,OAAOC,OAgCkDM,CAAaR,KACxE,4BAAQE,MAAM,cAAd,KACA,4BAAQA,MAAM,cAAd,KACA,4BAAQA,MAAM,cAAd,SAKR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUG,UAAU,aAEtB,kBAAC,IAAD,KAEGZ,EAAW,kBAAC,IAAD,CAAWW,QAAQ,cAAnB,kBAA6D,GACzE,kBAAC,IAAD,CAAkBK,MAAM,aAAaC,WAAW,GAC9C,2BAAOJ,cAAY,WAAWK,KAAK,WAAWC,KAAK,UAAUC,QAAS,SAACb,GA1C3EN,GADED,QA8CF,kBAAC,IAAD,CAAWY,UAAU,uBAElBV,EAAc,kBAAC,IAAD,CAAWS,QAAQ,cAAnB,eAA0D,GACzE,kBAAC,IAAD,CAAqBK,MAAM,aAAaC,WAAW,GACjD,2BAAOJ,cAAY,cAAcK,KAAK,QAAQC,KAAK,cAAcC,QAAS,SAACb,GA1CjFJ,GAAe,QA6Cb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUS,UAAU,aAEtB,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CAAkBI,MAAM,gBAAgBC,WAAW,GACjD,8BAAUE,KAAK,gBAIrB,kBAAC,IAAD,CAAWP,UAAU,uBAEnB,kBAAC,IAAD,CAAWD,QAAQ,cAAcP,GACjC,kBAAC,IAAD,CAAmBY,MAAM,iBAAiBC,WAAW,GACnD,2BAAOJ,cAAY,QAAQK,KAAK,OAAOC,KAAK,YAAYL,SAAU,SAACP,GAAD,OAAOD,EAAgBC,QAG7F,kBAAC,IAAD,CAAWK,UAAU,uBACnB,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,0BAAMS,KAAK,SAAX,oBACoB,IAClB,uBAAGR,cAAY,cAAcS,KAAK,oCAAlC,gBAFF,KAOA,2BACET,cAAY,eACZK,KAAK,OACLK,gBAAc,EACdJ,KAAK,YACLL,SAAU,SAACP,GAAD,OAAOD,EAAgBC,YCtGlCiB,UANG,kBAChB,kBAAC,IAAD,KACE,kBAAC,EAAD","file":"component---src-pages-forms-tsx-be44185f7b77e927536f.js","sourcesContent":["import React from 'react';\nimport { ChangeEvent, FormEvent, useState } from 'react';\nimport {\n  PCheckboxWrapper,\n  PDivider,\n  PFlex,\n  PFlexItem,\n  PHeadline,\n  PRadioButtonWrapper,\n  PSelectWrapper,\n  PTextareaWrapper,\n  PTextFieldWrapper,\n} from '@porsche-design-system/components-react';\n\nconst Forms = (): JSX.Element => {\n  const [select, setSelect] = useState('Change this Headline by selecting');\n  const [checkBox, setCheckBox] = useState(false);\n  const [radioButton, setRadioButton] = useState(false);\n  const [textField, setTextField] = useState('Change this Headline by typing');\n\n  const handleSelect = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setSelect(e.target.value);\n  };\n\n  const handleCheckBox = (e: FormEvent<HTMLInputElement>): void => {\n    if (checkBox) {\n      setCheckBox(false);\n    } else {\n      setCheckBox(true);\n    }\n  };\n\n  const handleRadioButton = (e: FormEvent<HTMLInputElement>): void => {\n    setRadioButton(true);\n  };\n\n  const handleTextField = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTextField(e.target.value);\n  };\n\n  return (\n    <PFlex direction=\"column\">\n      <PFlexItem>\n        <PHeadline variant=\"headline-3\">Form examples</PHeadline>\n      </PFlexItem>\n      <PFlexItem>\n        <PDivider className=\"divider\" />\n      </PFlexItem>\n      <PFlexItem>\n        {/*To illustrate the mock procedure during the tests the selected value is displayed in the headline */}\n        <PHeadline variant=\"headline-4\">{select}</PHeadline>\n        <form>\n          <PSelectWrapper>\n            <select data-testid=\"select\" value={select} onChange={(e) => handleSelect(e)}>\n              <option value=\"Headline A\">A</option>\n              <option value=\"Headline B\">B</option>\n              <option value=\"Headline C\">C</option>\n            </select>\n          </PSelectWrapper>\n        </form>\n      </PFlexItem>\n      <PFlexItem>\n        <PDivider className=\"divider\" />\n      </PFlexItem>\n      <PFlexItem>\n        {/*Checking the Checkbox makes the headline appear*/}\n        {checkBox ? <PHeadline variant=\"headline-4\">Checkbox Works</PHeadline> : ''}\n        <PCheckboxWrapper label=\"Some label\" hideLabel={false}>\n          <input data-testid=\"checkbox\" type=\"checkbox\" name=\"TestBox\" onInput={(e) => handleCheckBox(e)} />\n        </PCheckboxWrapper>\n      </PFlexItem>\n      <PFlexItem className=\"contentWrapperSmall\">\n        {/* Clicking the Radiobutton makes the headline appear*/}\n        {radioButton ? <PHeadline variant=\"headline-4\">Radio Works</PHeadline> : ''}\n        <PRadioButtonWrapper label=\"Some label\" hideLabel={false}>\n          <input data-testid=\"radiobutton\" type=\"radio\" name=\"RadioButton\" onInput={(e) => handleRadioButton(e)} />\n        </PRadioButtonWrapper>\n      </PFlexItem>\n      <PFlexItem>\n        <PDivider className=\"divider\" />\n      </PFlexItem>\n      <PFlexItem>\n        <form>\n          <PTextareaWrapper label=\"Test TextArea\" hideLabel={false}>\n            <textarea name=\"Testarea\"></textarea>\n          </PTextareaWrapper>\n        </form>\n      </PFlexItem>\n      <PFlexItem className=\"contentWrapperSmall\">\n        {/*The headline changes according to the text field input*/}\n        <PHeadline variant=\"headline-4\">{textField}</PHeadline>\n        <PTextFieldWrapper label=\"Test TextField\" hideLabel={false}>\n          <input data-testid=\"input\" type=\"text\" name=\"Textfield\" onChange={(e) => handleTextField(e)} />\n        </PTextFieldWrapper>\n      </PFlexItem>\n      <PFlexItem className=\"contentWrapperSmall\">\n        <form>\n          <PFlexItem>\n            <PTextFieldWrapper>\n              {/*Example of slotted links*/}\n              <span slot=\"label\">\n                Some label with a{' '}\n                <a data-testid=\"slottedHref\" href=\"https://designsystem.porsche.com\">\n                  Slotted Link\n                </a>\n                .\n              </span>\n              <input\n                data-testid=\"slottedInput\"\n                type=\"text\"\n                aria-invalid={true}\n                name=\"some-name\"\n                onChange={(e) => handleTextField(e)}\n              />\n            </PTextFieldWrapper>\n          </PFlexItem>\n        </form>\n      </PFlexItem>\n    </PFlex>\n  );\n};\n\nexport default Forms;\n","import React from 'react';\nimport Layout from '../components/layout';\nimport Forms from '../components/forms';\n\nconst FormsPage = (): JSX.Element => (\n  <Layout>\n    <Forms />\n  </Layout>\n);\n\nexport default FormsPage;\n"],"sourceRoot":""}